class Solution {
  public:
    int isCircle(vector<string> &arr) {
        // code here
        int n = arr.size();
        
        if (n == 0) return 0;
        
        vector<int> in_degree(26, 0), out_degree(26, 0);
        vector<vector<int>> adj(26);
        
        for (string &str : arr) {
            int first = str[0] - 'a';
            int last = str.back() - 'a';
            out_degree[first]++;
            in_degree[last]++;
            adj[first].push_back(last);
        }
        for (int i = 0; i < 26; i++) {
            if (in_degree[i] != out_degree[i]) {
                return 0;
            }
        }
        int start = -1;
        for (int i = 0; i < 26; i++) {
            if (out_degree[i] > 0) {
                start = i;
                break;
            }
        }
        
        if (start == -1) return 1;
        vector<bool> visited(26, false);
        dfs(adj, visited, start);
        for (int i = 0; i < 26; i++) {
            if (out_degree[i] > 0 && !visited[i]) {
                return 0;
            }
        }
        vector<vector<int>> reverse_adj(26);
        for (int i = 0; i < 26; i++) {
            for (int j : adj[i]) {
                reverse_adj[j].push_back(i);
            }
        }
        
        fill(visited.begin(), visited.end(), false);
        dfs(reverse_adj, visited, start);
        
        for (int i = 0; i < 26; i++) {
            if (out_degree[i] > 0 && !visited[i]) {
                return 0;
            }
        }
        
        return 1;
    
    }
    private:
    void dfs(vector<vector<int>> &adj, vector<bool> &visited, int v) {
        visited[v] = true;
        for (int u : adj[v]) {
            if (!visited[u]) {
                dfs(adj, visited, u);
            }
        }
    }
};
